name: Build Flippy Firmware for ARMv8

on:
  workflow_dispatch:
  watch:
    types: [started]
  schedule:
    - cron: 0 20 * * *

env:
  TZ: Asia/Shanghai
  TOOLCHAIN_TAG: toolchain

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ImmortalWrt
            repo_url: https://github.com/immortalwrt/immortalwrt
            repo_branch: openwrt-23.05
          - name: LEDE
            repo_url: https://github.com/coolsnowwolf/lede
            repo_branch: master

    env:
      CONFIG_FILE: configs/r66s-flippy.config
      EXTRA_CONFIG: configs/extra.config
      FIRMWARE_TYPE: ${{ matrix.name }}
      RELEASE_TAG: ARMv8-${{ matrix.name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q) 2>/dev/null || true
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
          libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
          vim wget xmlto xxd zlib1g-dev python3-setuptools
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Combine Disks
      run: |
        MNT_SIZE=$((($(df --block-size=1024 --output=avail /mnt | tail -1) - 1024*1024*1) * 1024))
        ROOT_SIZE=$((($(df --block-size=1024 --output=avail / | tail -1) - 1024*1024*4) * 1024))
        sudo fallocate -l $MNT_SIZE /mnt/mnt.img
        sudo fallocate -l $ROOT_SIZE /root.img
        MNT_NAME=$(sudo losetup -Pf --show /mnt/mnt.img)
        ROOT_NAME=$(sudo losetup -Pf --show /root.img)
        sudo pvcreate -f $MNT_NAME $ROOT_NAME
        sudo vgcreate actions $MNT_NAME $ROOT_NAME
        sudo lvcreate -n disk -l 100%FREE actions
        LV_NAME=$(sudo lvscan | awk -F "'" '{print $2}')
        sudo mkfs.btrfs -L combinedisk $LV_NAME
        sudo mkdir -p /workdir
        sudo mount -o compress=zstd $LV_NAME /workdir
        sudo chown -R runner:runner /workdir
        df -hT

    - name: Clone source code
      working-directory: /workdir
      run: |
        git clone ${{ matrix.repo_url }} -b ${{ matrix.repo_branch }} openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Cache Toolchain
      run: |
        chmod +x scripts/*.sh
        $GITHUB_WORKSPACE/scripts/toolchain.sh

    - name: Load custom configuration
      run: |
        cd openwrt
        # 加载主配置文件
        [ -e "$GITHUB_WORKSPACE/$CONFIG_FILE" ] && cat "$GITHUB_WORKSPACE/$CONFIG_FILE" >> .config
        # 加载额外配置文件
        [ -e "$GITHUB_WORKSPACE/$EXTRA_CONFIG" ] && cat "$GITHUB_WORKSPACE/$EXTRA_CONFIG" >> .config
        $GITHUB_WORKSPACE/scripts/download-custom-packages.sh
        $GITHUB_WORKSPACE/scripts/download-cores.sh
        $GITHUB_WORKSPACE/scripts/diy.sh
        make defconfig

    - name: Compile Toolchain
      if: env.REBUILD_TOOLCHAIN == 'true'
      id: toolchain
      run: |
        cd openwrt
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        $GITHUB_WORKSPACE/scripts/toolchain.sh

    - name: Delete Old Toolchain
      if: steps.toolchain.conclusion == 'success'
      uses: mknejp/delete-release-assets@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ env.TOOLCHAIN_TAG }}
        assets: '${{ env.FIRMWARE_TYPE }}-*'
        fail-if-no-assets: false
        fail-if-no-release: false

    - name: Upload Toolchain To Release
      if: steps.toolchain.conclusion == 'success'
      uses: softprops/action-gh-release@v2
      with:
        name: toolchain-cache
        tag_name: ${{ env.TOOLCHAIN_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        files: output/*
        body: OpenWrt 工具链缓存

    - name: Download package
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Packaging OpenWrt
      id: package_flippy
      if: steps.compile.conclusion == 'success'
      uses: unifreq/openwrt_packit@master
      env:
        OPENWRT_ARMSR: openwrt/bin/targets/*/*/*rootfs.tar.gz
        PACKAGE_SOC: s905d_r66s
        KERNEL_VERSION_NAME: 6.6.y_6.12.y
        KERNEL_AUTO_LATEST: true

    - name: Rename Firmware
      id: rename
      if: env.PACKAGED_STATUS == 'success'
      run: |
        cd ${{ env.PACKAGED_OUTPUTPATH }}
        ls -la
        # 重命名固件文件，将 openwrt 替换为 matrix.name
        for file in *openwrt*; do
          if [ -f "$file" ]; then
            new_name=$(echo "$file" | sed "s/openwrt/${{ matrix.name }}/g")
            mv "$file" "$new_name"
            echo "Renamed: $file -> $new_name"
          fi
        done
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: steps.rename.outputs.status == 'success'
      run: |
        touch release.txt
        echo "📦 ${{ matrix.name }} R66S 固件" >> release.txt
        echo "🕐 编译时间: $(date '+%Y-%m-%d %H:%M:%S')" >> release.txt
        echo "🌿 源码分支: ${{ matrix.repo_branch }}" >> release.txt
        echo "🎯 支持设备: FastRhino R66S (RK3568)" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload OpenWrt To Release
      if: steps.tag.outputs.status == 'success'
      uses: ncipollo/release-action@main
      with:
        name: ${{ env.RELEASE_TAG }}
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ env.RELEASE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        bodyFile: release.txt

    - name: Cleanup
      if: always()
      run: |
        gh run list --workflow="build-flippy.yml" --limit 50 --json databaseId --jq '.[10:][].databaseId' | xargs -I {} gh run delete {} 2>/dev/null || true
        gh run list --workflow="build-flippy.yml" --status failure --limit 20 --json databaseId --jq '.[].databaseId' | xargs -I {} gh run delete {} 2>/dev/null || true
        gh run list --workflow="build-flippy.yml" --status cancelled --limit 20 --json databaseId --jq '.[].databaseId' | xargs -I {} gh run delete {} 2>/dev/null || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
